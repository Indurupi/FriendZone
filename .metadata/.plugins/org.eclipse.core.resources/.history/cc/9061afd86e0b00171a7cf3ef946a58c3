package com.friendzone.Controller;

import java.util.ArrayList;
import java.util.logging.Logger;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.friendzone.DaoServices.JobServices;
import com.friendzone.Model.JobApplicationModel;
import com.friendzone.Model.JobModel;

@RestController
public class JobController {
	
	@Autowired
	JobServices jobServices;
	
	//public static final Logger logger = LoggerFactory.getLogger(JobController.class);
	
	@RequestMapping(value="/jobinsert")
	public ResponseEntity<String> insertJob(@RequestBody JobModel jobModel)
	{
		//logger.info("inside view all blogs method in job controller");
		System.out.println("inside view all jobs method");
		if (jobServices.createJob(jobModel)) {
			return new ResponseEntity<String>(HttpStatus.CREATED);
		} else {
			return new ResponseEntity<String>(HttpStatus.NOT_ACCEPTABLE);
		}
	}
	
	@RequestMapping(value="/jobapply")
	public ResponseEntity<String> applyJob(@RequestBody JobApplicationModel jobApplicationModel)
	{
		//logger.info("inside view all blogs method in job controller");
		System.out.println("inside applyjob method");
		if (jobServices.applyJob(jobApplicationModel)) {
			return new ResponseEntity<String>(HttpStatus.CREATED);
		} else {
			return new ResponseEntity<String>(HttpStatus.NOT_ACCEPTABLE);
		}
	}
	
	@RequestMapping(value="/viewappliedjobs",method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<ArrayList<JobApplicationModel>> viewAppliedJobs(@RequestBody JobApplicationModel jobApplicationModel)
	{
		//logger.info("inside view all blogs method in job controller");
		System.out.println("inside viewappliedjobs method");
		ArrayList<JobApplicationModel> appliedjobs = jobServices.viewAppliedJobs(userid);
		if (jobServices.applyJob(jobApplicationModel)) {
			return new ResponseEntity<ArrayList<JobApplicationModel>>(HttpStatus.CREATED);
		} else {
			return new ResponseEntity<ArrayList<JobApplicationModel>>((ArrayList<JobApplicationModel>) appliedjobs,HttpStatus.NOT_ACCEPTABLE);
		}
	}
	
	@RequestMapping(value = "/jobgetall", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<ArrayList<JobModel>> viewAllBlogs() {
		//logger.info("inside view all blogs method in job controller");
		System.out.println("inside view all jobs method");
		ArrayList<JobModel> jobs = (ArrayList<JobModel>) jobServices.fetchAllJobs();
		// System.out.println(forums);
		if (jobs.isEmpty()) {
			return new ResponseEntity<ArrayList<JobModel>>(HttpStatus.NO_CONTENT);
		} else {
			return new ResponseEntity<ArrayList<JobModel>>((ArrayList<JobModel>) jobs, HttpStatus.OK);
		}
	}
}
